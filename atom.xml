<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Underground WebDev]]></title><description><![CDATA[Underground WebDev]]></description><link>https://udgwebdev.com/</link><image><url>https://udgwebdev.com/images/udgwebdev-logo.png</url><title>Underground WebDev</title><link>https://udgwebdev.com/</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 02 Oct 2017 21:37:31 GMT</lastBuildDate><atom:link href="https://udgwebdev.com/atom.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 02 Oct 2017 21:37:31 GMT</pubDate><managingEditor><![CDATA[Caio Ribeiro Pereira]]></managingEditor><webMaster><![CDATA[Caio Ribeiro Pereira]]></webMaster><ttl>60</ttl><item><title><![CDATA[Deploying Node.js na Umbler]]></title><description><![CDATA[<h1>Deploying Node.js na Umbler</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="02/08/2017" pubdate=""><b>02/08/2017</b></time> | Tags: <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/umbler-logo.png" alt="Deploying Node.js na Umbler" title="Deploying Node.js na Umbler"></p>
<p>Se voc&#xEA; esta procurando um host Node.js aqui no Brasil e precisa de um servi&#xE7;o bem pr&#xE1;tico em que toda orquestra&#xE7;&#xE3;o dos servers voc&#xEA; faz em um Saas com um visual bem intuitivo, atualmente recomendo que teste a cloud on-demand bem bacana chamada Umbler.</p>
<p>Eles al&#xE9;m de darem suporte a Node.js, trabalham com PHP e ASP.Net (E em breve ter&#xE1; suporte a Ruby/Python/Java tamb&#xE9;m!) e o foco deles &#xE9; facilitar a vida de quem desenvolve para a web, por isso tornaram todo o processo de deploy muito simplificado para voc&#xEA; gastar tempo e energia no que mais agrega valor, que &#xE9; o desenvolvimento da sua aplica&#xE7;&#xE3;o.</p>
<p>Falando em deploy r&#xE1;pido, para comprovar isso, veja a seguir, um tutorial sobre como botar uma aplica&#xE7;&#xE3;o Node.js:</p>
<p>Vamos supor, que voc&#xEA; j&#xE1; se <a href="https://www.umbler.com/br/hospedagem-nodejs">cadastrou na Umbler</a>, e criou o projeto <code>hello-umbler</code>, com isso, ele vai liberar para voc&#xEA; uma git url para viabilizar que voc&#xEA; fa&#xE7;a push de novas altera&#xE7;&#xF5;es, que ser&#xE3;o refletidas em um novo deploy no servidor. Se voc&#xEA; j&#xE1; criou no painel de controle da umbler, basta abrir o terminal para rodar os comandos a seguir:</p>
<pre><code class="language-bash">mkdir hello-umbler
cd hello-umbler
npm init
</code></pre>
<p>Preencha o question&#xE1;rio do npm init para gerar o <code>package.json</code> no final. Ap&#xF3;s essa etapa, ser&#xE1; necess&#xE1;rio iniciar o git nesse projeto e incluir a url remota do git do servidor, para isso execute:</p>
<pre><code class="language-bash">git init
git remote add umbler GIT_URL_DO_SERVER_UMBLER
</code></pre>
<p><em>Obs.:</em> Troque <code>GIT_URL_DO_SERVER_UMBLER</code> pela git url gerada na sua conta umbler, ok?<br>Agora que temos integrado no git a url do servidor remoto, podemos criar nosso projeto da maneira que quiser, para exemplificar, crie o c&#xF3;digo <code>app.js</code>:</p>
<pre><code class="language-javascript">const http = require(&apos;http&apos;);

const server = http.createServer((req, res) =&gt; {
  res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;);
  res.end(&apos;Hello Umbler!&apos;);
});

const port = process.env.PORT || 3000;

server.listen(port, () =&gt; console.log(`Umbler server at port:${port}`));
</code></pre>
<p>Agora edite o <code>package.json</code> para incluir o comando <code>npm start</code>:</p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;hello-umbler&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;description&quot;: &quot;Hello Umbler&quot;,
  &quot;main&quot;: &quot;app.js&quot;,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node app.js&quot;,
  },
  &quot;author&quot;: &quot;Caio R. Pereira&quot;,
  &quot;license&quot;: &quot;MIT&quot;
}
</code></pre>
<p>Ap&#xF3;s criar esse simples server, voc&#xEA; pode testar se o mesmo esta executando corretamente atrav&#xE9;s do comando <code>npm start</code>, supondo que tudo esteja ok, vamos para a parte do deploy, para isso, basta rodar esses comandos git:</p>
<pre><code class="language-bash">git add .
git commit -m &quot;First commit&quot;
git push umbler master
</code></pre>
<p>Ao realizar um push no remote <code>umbler</code>, automaticamente ser&#xE1; realizado um deploy Node.js no servidor deles, afinal tudo que ele vai precisar &#xE9; do <code>package.json</code> configurado corretamente para identificar os metadados necess&#xE1;rios para instalar vers&#xE3;o node.js desejada, suas depend&#xEA;ncias para no final ser executado o comando <code>npm start</code>, que &#xE9; gerado no atributo <code>script: { start: &quot;node app&quot; }</code> do package.json.</p>
<p>Outro detalhe bacana &#xE9; que se voc&#xEA; possuir o arquivo <code>yarn.lock</code> na ra&#xED;z do projeto, o processo de deployment vai usar <code>yarn</code> no lugar de <code>npm</code> no momento da instala&#xE7;&#xE3;o das deped&#xEA;ncias.</p>
<p>No final, sua aplica&#xE7;&#xE3;o ser&#xE1; publicada no domain que voc&#xEA; configurou no painel da umbler.</p>
<p>Outras funcionalidades que esse servi&#xE7;o possui:</p>
<ul>
<li>Suporte aos bancos MongoDB, MySQL e SQL Server (Em breve Redis e Postgres)</li>
<li>Suporte aos cms Wordpress, Drupal, Joomla, Prestashop, Opencart e muitos outros</li>
<li>Monitora&#xE7;&#xE3;o de CPU/Ram do servidor em tempo real</li>
<li>SSH de dupla autentica&#xE7;&#xE3;o 2FA</li>
<li>Ambiente de testes para publicar vers&#xF5;es betas de sua aplica&#xE7;&#xE3;o</li>
<li>Certificados SSL</li>
<li>Suporte a publica&#xE7;&#xE3;o e instala&#xE7;&#xE3;o de addons</li>
<li>Suporte a deploy via Git, FTP e at&#xE9; mesmo via Dropbox</li>
</ul>
<p>Vale a pena testar! Aqui voc&#xEA; visualiza os planos e pre&#xE7;os que eles oferecem, e desde o <a href="https://www.umbler.com/br/hospedagem-nodejs">sign-up at&#xE9; chegar no passo final que &#xE9; o deploy voc&#xEA; vai ganhando b&#xF4;nus at&#xE9; completar o m&#xE1;ximo de 100R$ para usar nesta plataforma</a>.</p>]]></description><link>https://udgwebdev.com/deploying-nodejs-na-umbler</link><guid isPermaLink="true">https://udgwebdev.com/deploying-nodejs-na-umbler</guid><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Wed, 02 Aug   17 03:00:00 GMT</pubDate></item><item><title><![CDATA[Habilitando stealth mode no MacOS]]></title><description><![CDATA[A dica desse post é bem rápida e super simples de se aplicar. E vem com uma vantagem muito relevante para deixar mais seguro o sistema operacional MacOS no momento em que ele se conectar a qualquer rede.]]></description><link>https://udgwebdev.com/habilitando-stealth-mode-no-macos</link><guid isPermaLink="true">https://udgwebdev.com/habilitando-stealth-mode-no-macos</guid><category><![CDATA[Sistemas operacionais]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Tue, 25 Jul   17 03:00:00 GMT</pubDate></item><item><title><![CDATA[Variáveis e escopos do ES6]]></title><description><![CDATA[<h1>Vari&#xE1;veis e escopos do ES6</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="12/06/2017" pubdate=""><b>12/06/2017</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a>, <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="Vari&#xE1;veis e escopos do ES6" title="Vari&#xE1;veis e escopos do ES6"></p>
<p>Desde o in&#xED;cio do JavaScript sempre foi muito comum declarar vari&#xE1;veis ou constantes usando a keyword <code>var</code>. &#xC9; importante saber que ao declarar vari&#xE1;veis usando <code>var</code> elas ser&#xE3;o <em>function-scoped</em>, ou seja, s&#xE3;o vis&#xED;veis dentro de um escopo de fun&#xE7;&#xE3;o e tamb&#xE9;m dentro de fun&#xE7;&#xF5;es filhas deste escopo. Isso pode ser um problema pois este comportamento pode se tornar bem confuso. Por exemplo:</p>
<pre><code class="language-javascript">var msg = &apos;Ol&#xE1; ...&apos;;
function helloMsg(string) {
  if (string) {
    var msg = `Ol&#xE1; ${string}`;
    return msg;
  }
  return msg;
}
helloMsg();
</code></pre>
<p>Ao olhar a simples l&#xF3;gica voc&#xEA; diria: ah, essa &#xE9; f&#xE1;cil, vai retornar a string <code>&apos;Ol&#xE1; ...&apos;</code>, pois &#xE9;, para nossa surpresa ao executar o comando <code>helloMsg();</code> foi retornado <code>undefined</code>. Isso se deve pelo fato de que o escopo vale para fun&#xE7;&#xE3;o <code>helloMsg()</code> como um todo - mesmo sem esta linha ter sido executada por conta do <code>if (string)</code>. Para voc&#xEA; entender, &#xE9; como se o interpretador JavaScript tivesse lido o c&#xF3;digo todo como o seguinte:</p>
<pre><code class="language-javascript">var msg = &apos;Ol&#xE1; ...&apos;;
function helloMsg(string) {
  // Internamente o interpretador vai criar uma var&#xED;avel undefined no escopo da function
  var msg; 
  if (string) {
    var msg = `Ol&#xE1; ${string}`;
    return msg;
  }
  return msg;
}
helloMsg();
</code></pre>
<h2>Escopo de bloco com let e const</h2><p>No ES6 existem duas novas formas para declarar vari&#xE1;veis, s&#xE3;o <code>let</code> e <code>const</code>. Diferente de <code>var</code>, essas vari&#xE1;veis s&#xE3;o <em>block-scoped</em>, ou seja, elas s&#xE3;o vis&#xED;veis dentro de um escopo de bloco e tamb&#xE9;m dentro de blocos filhos deste escopo. Este comportamento se aproxima de outras linguagens de programa&#xE7;&#xE3;o, como por exemplo <em>Ruby</em>.</p>
<h3>Usando let</h3><p><code>let</code> funciona como <code>var</code>, mas como escopo de bloco em vez de escopo de fun&#xE7;&#xE3;o. Perceba no c&#xF3;digo abaixo que a vari&#xE1;vel <code>tmp</code> s&#xF3; existe dentro do bloco do if:</p>
<pre><code class="language-javascript">function nomeEditora(string) {
  if (string) {
    let tmp = string;
  }
  console.log(tmp);
  // ReferenceError: tmp is not defined
  return string;
}
</code></pre>
<h3>Usando const</h3><p><em>const</em> funciona similar a <em>let</em>, com a diferen&#xE7;a que voc&#xEA; j&#xE1; precisa iniciar com um valor fixo na sua declara&#xE7;&#xE3;o, e este valor n&#xE3;o poder&#xE1; ser trocado depois, ou seja, as constantes s&#xE3;o imut&#xE1;veis (<em>immutable variables</em>). Exemplo:</p>
<pre><code class="language-javascript">const nome;
// SyntaxError: Missing initializer in const declaration

const nome = &apos;John Connor&apos;;
nome = &apos;Sarah Connor&apos;;
// TypeError: Assignment to constant variable.
</code></pre>
<h2>Quando usar const ou let</h2><p>Recomendamos que use sempre <code>let</code> ou <code>const</code>, e evite <code>var</code>. Quando voc&#xEA; souber que o valor da var&#xED;avel n&#xE3;o ir&#xE1; mudar, ou seja, a constante nunca poder&#xE1; receber outro valor ou ser usada com opera&#xE7;&#xF5;es usando <code>++</code> ou <code>--</code>, use <code>const</code>. &#xC9; importante saber que o objeto e array que for uma constante pode se alterar em seus atributos internos sem problemas, exemplo:</p>
<pre><code class="language-javascript">const usuario = {};
usuario.nome = &apos;John Connor&apos;;
console.log(usuario.nome); // John Connor

const scores = [];
scores.push(1);
scores.push(3);
scores.push(2);
console.log(scores); // [1, 3, 2]
</code></pre>
<p>Ao usar a fun&#xE7;&#xE3;o <code>for</code> tamb&#xE9;m prefira us&#xE1;-la com <code>const</code>. O compilador do ES6 associar&#xE1; um valor imut&#xE1;vel a constante para cada loop. Lembrando que o valor da constante x dentro do bloco do <code>for</code> n&#xE3;o poder&#xE1; ser alterada:</p>
<pre><code class="language-javascript">for (const x of [&apos;a&apos;, &apos;b&apos;]) {
  console.log(x);
}
</code></pre>
<p>Entretando, use <code>let</code> quando o valor inicial de uma var&#xED;avel ir&#xE1; mudar. Por exemplo:</p>
<pre><code class="language-javascript">let counter = 0;
// initial value
counter++;
// change

let obj = {};
// initial value
obj = { foo: 123 };
// change
</code></pre>
<p>Se voc&#xEA; seguir esses conselhos, voc&#xEA; n&#xE3;o ter&#xE1; mais a keyword <code>var</code> em seus futuros projetos JavaScript.</p>]]></description><link>https://udgwebdev.com/variaveis-e-escopos-do-es6</link><guid isPermaLink="true">https://udgwebdev.com/variaveis-e-escopos-do-es6</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Mon, 12 Jun   17 03:00:00 GMT</pubDate></item><item><title><![CDATA[Imutabilidade no ES6]]></title><description><![CDATA[<h1>Imutabilidade no ES6</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="03/04/2017" pubdate=""><b>03/04/2017</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a>, <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="Imutabilidade no ES6" title="Imutabilidade no ES6"></p>
<p>Caso voc&#xEA; j&#xE1; esteja por dentro sobre o <strong>ES6/7/8/9/100000</strong>, voc&#xEA; j&#xE1; deve estar bem ciente de como trabalhar com imutabilidade usando a keyword <code>const</code> para declarar var&#xED;aveis im&#xFA;taveis. De fato n&#xE3;o h&#xE1; nenhum segredo nisso, basicamente voc&#xEA; declara qualquer <strong>tipo de dados</strong> usando <code>const</code> e nunca mais seu estado inicial ser&#xE1; modificado, correto? Veja esse exemplo:</p>
<pre><code class="language-javascript">const score = 10;
console.log(score); // 10

score = 9; // TypeError: Assignment to constant variable
</code></pre>
<p>At&#xE9; aqui tudo ok, foi criado uma constante <code>score</code> com valor <code>10</code>, e ao tentar modificar seu valor para <code>9</code>, ocorreu o erro: <code>TypeError: Assignment to constant variable</code>, que basicamente &#xE9; um erro referente a n&#xE3;o permiss&#xE3;o de mudan&#xE7;a de valores em uma vari&#xE1;vel que j&#xE1; possui um valor.</p>
<p>Outro detalhe da <code>const</code>, voc&#xEA; n&#xE3;o pode cri&#xE1;-la sem definir um valor, pois vai gerar o seguinte erro:</p>
<pre><code class="language-javascript">const score; // SyntaxError: Missing initializer in const declaration
</code></pre>
<p>&#xC9; regra b&#xE1;sica, n&#xE3;o se pode criar constante sem definir seu estado inicial, pois <code>undefined</code> n&#xE3;o &#xE9; uma defini&#xE7;&#xE3;o de um bom estado, n&#xE3;o &#xE9;?</p>
<p>Por&#xE9;m voltando a pergunta inicial, usar <code>const</code> torna qualquer tipo de dado do JavaScript imut&#xE1;vel? N&#xC3;O!<br>Somente dados primitivos: <strong>String, Number, Date, Boolean</strong>, ser&#xE3;o im&#xFA;taveis, se voc&#xEA; usar objeto ou array, facilmente voc&#xEA; poder&#xE1; modificar os atributos internos deles, o que teoricamente deveria ser im&#xFA;tavel tamb&#xE9;m.</p>
<pre><code class="language-javascript">const scores = [];
scores.push(1);
scores.push(3);
scores.push(4);
console.log(scores); /// [1, 3, 4]
</code></pre>
<p>O mesmo cen&#xE1;rio ocorre para objetos:</p>
<pre><code class="language-javascript">const player = {};
player.name = &apos;John Connor&apos;;
player.age = 25;
console.log(player); // { name: &apos;John Connor&apos;, age: 25 }
</code></pre>
<p>Nestes dois cen&#xE1;rios, seus atributos internos foram modificados e nenhum erro ocorreu, afinal o <code>const</code> somente torna <strong>im&#xFA;tavel as atribui&#xE7;&#xF5;es das vari&#xE1;veis</strong>, ou seja, tudo aquilo que for atribu&#xED;do usando <code>=</code> na inicializa&#xE7;&#xE3;o de uma vari&#xE1;vel, qualquer atribui&#xE7;&#xE3;o em propriedades de um objeto ser&#xE3;o ignorados.</p>
<h2>Como tornar objetos e arrays im&#xFA;taveis??</h2><p>Desde o ES5, j&#xE1; existia uma fun&#xE7;&#xE3;o chamada <code>Object.freeze()</code> que congela o estado interno de um objeto ou array, ou seja, seus atributos jamais ser&#xE3;o modificados, congelando seu estado, e n&#xE3;o permitindo a inclus&#xE3;o, altera&#xE7;&#xE3;o e exclus&#xE3;o de seus atributos internos, entenda nesse exemplo:</p>
<pre><code class="language-javascript">const player = { name: &apos;John Connor&apos; };
Object.freeze(player);
// Silenciosamente n&#xE3;o vai acontecer nenhum erro
player.age = 25; 
// Por&#xE9;m n&#xE3;o ser&#xE1; inclu&#xED;do o atributo age no objeto que foi congelado!
console.log(player); // Object { name: &apos;John Connor&apos; }
</code></pre>
<p>No caso do array, qualquer modifica&#xE7;&#xE3;o vai gerar um erro, veja:</p>
<pre><code class="language-javascript">const scores = [1, 2, 3];
Object.freeze(scores);
scores.push(10); // TypeError: Can&apos;t add property 10, object is not extensible
</code></pre>
<p>Caso seja necess&#xE1;rio visualizar um erro na modifica&#xE7;&#xE3;o de um objeto, basta usar <code>&apos;use strict&apos;</code> no topo do c&#xF3;digo:</p>
<pre><code class="language-javascript">&apos;use strict&apos;;
const player = { name: &apos;John Connor&apos; };
Object.freeze(player);
player.age = 25; // TypeError: Can&apos;t add property age, object is not extensible
</code></pre>
<h2>Conclus&#xE3;o</h2><p>Se voc&#xEA; pretende trabalhar 100% com dados im&#xFA;taveis e isso inclui tanto dados primitivos quanto objetos e arrays, basta usar <code>const</code> para as vari&#xE1;veis primitivas e <code>const</code> + <code>Object.freeze()</code> para objetos e ou arrays.</p>
<p>Fonte: <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">MDN - Object.freeze()</a></p>]]></description><link>https://udgwebdev.com/imutabilidade-no-es6</link><guid isPermaLink="true">https://udgwebdev.com/imutabilidade-no-es6</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Mon, 03 Apr   17 03:00:00 GMT</pubDate></item><item><title><![CDATA[Você pode colaborar em projetos open-source fazendo doações]]></title><description><![CDATA[Um post não técnico que tem o objetivo de estimular as pessoas a reconhecerem mais os projetos open-source que elas curtem usar através da simples atitude em realizar uma doação.]]></description><link>https://udgwebdev.com/voce-pode-colaborar-em-projetos-open-source-fazendo-doacoes</link><guid isPermaLink="true">https://udgwebdev.com/voce-pode-colaborar-em-projetos-open-source-fazendo-doacoes</guid><category><![CDATA[SouDev]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Sun, 26 Feb   17 03:00:00 GMT</pubDate></item><item><title><![CDATA[Aumentando performance do Socket.IO]]></title><description><![CDATA[<h1>Aumentando performance do Socket.IO</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="20/02/2017" pubdate=""><b>20/02/2017</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a>, <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/socket-io.jpg" alt="Aumentando performance do Socket.IO" title="Aumentando performance do Socket.IO"></p>
<p>Fala galera! Ultimamente andei sem muito tempo para me dedicar no blog aqui, mas hoje venho com um post bacana para compens&#xE1;-los!<br>Esse post ter&#xE1; uma implementa&#xE7;&#xE3;o bem simples e r&#xE1;pida de se fazer, e os ganhos em performance ser&#xE3;o gigantescos para uma aplica&#xE7;&#xE3;o Node.js que utilize Socket.IO.</p>
<p>Para quem n&#xE3;o conhece, o Socket.IO &#xE9; um framework bem popular no Node.js, sua fun&#xE7;&#xE3;o &#xE9; fornecer uma comunica&#xE7;&#xE3;o bidirecional entre cliente e servidor, pelo qual permite implementar intera&#xE7;&#xF5;es realtime na aplica&#xE7;&#xE3;o.<br>Aqui no blog h&#xE1; alguns posts sobre Socket.IO, ent&#xE3;o caso queria conhec&#xEA;-lo na pr&#xE1;tica, recomendo a leitura desses posts:</p>
<ul>
<li><a href="https://udgwebdev.com/real-time-com-socket-io-no-nodejs" title="Real-time com Socket.IO no Node.js">Real-time com Socket.IO no Node.js</a></li>
<li><a href="https://udgwebdev.com/criando-um-chat-usando-session-do-express-4-no-socket-io-1-0" title="Criando um chat usando Session do Express 4 no Socket.IO 1.0">Criando um chat usando Session do Express 4 no Socket.IO 1.0</a></li>
<li><a href="https://udgwebdev.com/socket-io-com-redis" title="Socket.IO com Redis">Socket.IO com Redis</a></li>
<li><a href="https://udgwebdev.com/nodejs-express-socketio-e-sessions" title="Node.js Express, Socket.IO e Sessions">Node.js Express, Socket.IO e Sessions</a></li>
<li><a href="https://udgwebdev.com/node-js-para-leigos-explorando-real-time" title="Node.js para leigos - Explorando real-time">Node.js para leigos - Explorando real-time</a></li>
</ul>
<h2>Aumentando performance usando uWebSocket</h2><p>Como disse no come&#xE7;o, esse post ser&#xE1; bem r&#xE1;pido, pr&#xE1;tico e com um resultado sensacional no final, se voc&#xEA; j&#xE1; possui uma aplica&#xE7;&#xE3;o com Socket.IO, e j&#xE1; utiliza suas principais features, e gostaria de aumentar performance, sem ter a necessidade de aplicar grandes modifica&#xE7;&#xF5;es na aplica&#xE7;&#xE3;o, para isso basta instalar o m&#xF3;dulo <code>uws</code>, conhecido como uWebSocket.</p>
<pre><code class="language-bash">npm install uws --save
</code></pre>
<p>Em resumo, este m&#xF3;dulo &#xE9; uma vers&#xE3;o otimizada do WebSockets, t&#xE3;o otimizado que foi escrito em C/C++ e esta dispon&#xED;vel tamb&#xE9;m como addon para o Node.js. Ele possui a mesma interface do WebSocket convencional, tanto &#xE9; que se voc&#xEA; possui no server-side o m&#xF3;dulo <code>ws</code>, voc&#xEA; s&#xF3; ter&#xE1; o simples trabalho de remov&#xEA;-lo, instalar o <code>uws</code> e mudar no carregamento de seu m&#xF3;dulo, de <code>require(&apos;ws&apos;)</code> para <code>require(&apos;uws&apos;)</code>.</p>
<p>No nosso caso, vamos supor que temos uma aplica&#xE7;&#xE3;o que utilize o Socket.IO.</p>
<pre><code class="language-javascript">const http = require(&apos;http&apos;);
const express = require(&apos;express&apos;);
const socketIO = require(&apos;socket.io&apos;);

const app = express();
const server = http.Server(app);
const io = socketIO(server);

io.on(&apos;connection&apos;, (socket) =&gt; {
  // Enviando &apos;hello!&apos; para todos os clientes conectados
  io.emit(&apos;data&apos;, &apos;hello!&apos;); 
});

server.listen(3000, () =&gt; console.log(&apos;Socket.IO Running...&apos;));
</code></pre>
<p>Neste caso, para adotar uma implementa&#xE7;&#xE3;o WebSockets diferente da convencional no Socket.IO, basta fazer as seguintes modifica&#xE7;&#xF5;es:</p>
<pre><code class="language-javascript">const http = require(&apos;http&apos;);
const express = require(&apos;express&apos;);
const socketIO = require(&apos;socket.io&apos;);
const uws = require(&apos;uws&apos;);

const app = express();
const server = http.Server(app);
const io = socketIO(server);

// O atributo io.ws &#xE9; o respons&#xE1;vel pela implementa&#xE7;&#xE3;o WebSockets.
// No Socket.IO &#xE9; necess&#xE1;rio desativar &apos;perMessageDeflate&apos; 
io.ws = new uws.Server({ perMessageDeflate: false });

io.on(&apos;connection&apos;, (socket) =&gt; {
  io.emit(&apos;data&apos;, &apos;hello!&apos;); 
});

server.listen(3000, () =&gt; console.log(&apos;Socket.IO Running...&apos;));
</code></pre>
<p>Com essa simples mudan&#xE7;a, sua aplica&#xE7;&#xE3;o Socket.IO estar&#xE1; <strong>62x mais eficiente no consumo de mem&#xF3;ria, 42x melhor na gest&#xE3;o de conex&#xF5;es e 61x mais r&#xE1;pido no throughput de mensagens curtas</strong>.<br>Esses dados, est&#xE3;o no readme do <a href="https://github.com/uWebSockets/uWebSockets">github uWebSockets</a>, l&#xE1; tem mais detalhes sobre features desse m&#xF3;dulo e tamb&#xE9;m h&#xE1; um benchmark comparando uWebSockets com outros m&#xF3;dulos populares.</p>
<p>At&#xE9; a pr&#xF3;xima!</p>]]></description><link>https://udgwebdev.com/aumentando-performance-do-socketio</link><guid isPermaLink="true">https://udgwebdev.com/aumentando-performance-do-socketio</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Mon, 20 Feb   17 02:00:00 GMT</pubDate></item><item><title><![CDATA[Quando não usar Arrow Functions]]></title><description><![CDATA[<h1>Quando n&#xE3;o usar Arrow Functions</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="24/12/2016" pubdate=""><b>24/12/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="ES6 Arrow Functions" title="ES6 Arrow Functions"></p>
<p>Infelizmente, apesar do <strong>Arrow Function</strong> ser uma feature muito bacana e &#xFA;til do ES6, saiba que nem sempre ser&#xE1; poss&#xED;vel utilizar ela, pois ela n&#xE3;o foi feita para substituir 100% a declara&#xE7;&#xE3;o de function principal, o arrow function, apesar de trazer um <strong>syntax sugar</strong> e algumas utilidades como, por exemplo, compartilhamento de contextos, voc&#xEA; precisa antes de us&#xE1;-la, aprender tamb&#xE9;m quando n&#xE3;o us&#xE1;-la para que voc&#xEA; n&#xE3;o fique perdido na procura de um bug de dif&#xED;cil de resolver, veja a seguir uma lista com poss&#xED;veis situa&#xE7;&#xF5;es para <strong>N&#xC3;O USAR</strong> arrow funcition.</p>
<h2>Click handlers</h2><p>Para exemplificar, vamos supor que existe um bot&#xE3;o pelo qual queremos mudar sua cor entre azul e vermelho, conforme ele &#xE9; clicado, para isso temos o seguinte html:</p>
<pre><code class="language-html">&lt;style&gt;
  button { background-color: blue; }
  .on { background-color: red; }
&lt;/style&gt;
&lt;button id=&quot;click_here&quot;&gt;CLIQUE AQUI!&lt;/button&gt;
</code></pre>
<p>Agora vamos programar o evento de click desse bot&#xE3;o, usando arrow function:</p>
<pre><code class="language-javascript">const button = document.querySelector(&apos;#click_here&apos;);
button.addEventListener(&apos;click&apos;, () =&gt; {
  this.classList.toggle(&apos;on&apos;);
});
</code></pre>
<p>Se voc&#xEA; testar esse bot&#xE3;o, vai gerar o erro: <code>TypeError, cannot read property &apos;toggle&apos; of undefined</code></p>
<p>Isso ocorre pois o <code>this</code> de <code>this.classList.toggle(&apos;on&apos;)</code> compartilha os atributos de <code>window</code> e n&#xE3;o do evento. E com isso nesse caso o ideal &#xE9; utilizar a declara&#xE7;&#xE3;o de function:</p>
<pre><code class="language-javascript">const button = document.querySelector(&apos;#click_here&apos;);
button.addEventListener(&apos;click&apos;, function() {
  this.classList.toggle(&apos;on&apos;);
});
</code></pre>
<h2>Object methods</h2><p>Se voc&#xEA; pretende criar um <strong>object methods no frontend</strong>, n&#xE3;o &#xE9; recomendado utilizar arrow functions em seus m&#xE9;todos, entenda o porque vendo esse exemplo:</p>
<pre><code class="language-javascript">const Usuario = {
  pontos: 20,
  ganhou: () =&gt; {
    this.pontos++;
  }
}
</code></pre>
<p>Se voc&#xEA; rodar <code>Usuario.ganhou()</code>, algumas vezes, a expectativa &#xE9; que os <code>pontos</code> esteja com valores acima do que foi estabelecido em seu estado inicial, ou seja, maior que 20.</p>
<p>Mas se voc&#xEA; acessar: <code>Usuario.pontos</code> seu valor vai continuar 20, e isso ocorre pelo fato de que o <code>this</code>, estar&#xE1; sendo referenciado ao objeto <code>window</code> do browser, herdando seu escopo.</p>
<p>Para resolver esse problema, voc&#xEA; pode tanto usar a declara&#xE7;&#xE3;o cl&#xE1;ssica de <code>function</code>, quanto usar a declara&#xE7;&#xE3;o de m&#xE9;todos do <strong>Object methods</strong>:</p>
<pre><code class="language-javascript">// Declarando com function
const Usuario = {
  pontos: 20,
  ganhou: function() {
    this.pontos++;
  }
}
// Utilizando Object methods
const Usuario = {
  pontos: 20,
  ganhou() {
    this.pontos++;
  }
}
</code></pre>
<h2>Argumentos de um objeto</h2><p>Quando se cria uma fun&#xE7;&#xE3;o que trabalhe com <code>arguments</code>, caso voc&#xEA; precise tratar esses arguments em uma fun&#xE7;&#xE3;o interna, tamb&#xE9;m n&#xE3;o &#xE9; recomendado usar arrow function, veja esse exemplo:</p>
<pre><code class="language-javascript">const ordernaPlayers = () =&gt; {
  const players = Array.from(arguments);
  return players.map((player, i) =&gt; {
    return `${player} chegou em #${i + 1}`;
  })
  console.log(arguments);
}
</code></pre>
<p>O problema nesse exemplo &#xE9; que a fun&#xE7;&#xE3;o <code>ordernaPlayers()</code> vai gerar o erro: <code>ReferenceError, arguments is not defined.</code>, esse erro ocorrer&#xE1; pelo simples fato de que <code>arguments</code> vai retornar um array e arrays n&#xE3;o trabalham com a keyword <code>this</code>, e mesmo n&#xE3;o utilizando essa keyword, vai ocorrer esse erro, para resolver esse bug, basta aplicar function na fun&#xE7;&#xE3;o pai, a <code>ordernaPlayers()</code>:</p>
<pre><code class="language-javascript">const ordernaPlayers = function() {
  const players = Array.from(arguments);
  return players.map((player, i) =&gt; {
    return `${player} chegou em #${i + 1}`;
  })
  console.log(arguments);
}
</code></pre>
<h2>Prototypes</h2><p>Jamais use arrow function em fun&#xE7;&#xF5;es prototype de um objeto, simplesmente os atributos n&#xE3;o ser&#xE3;o definidos mesmo instanciando o objeto corretamente, veja esse exemplo:</p>
<pre><code class="language-javascript">class Cliente {
  constructor(nome, idade) {
    this.nome = nome;
    this.idade = idade;
  }  
}
Cliente.prototype.apresentar = () =&gt; {
  return `Cliente: ${this.nome} | Idade: ${this.idade}`;
};
</code></pre>
<p>Agora tente instanciar um cliente e em seguida se voc&#xEA; invocar a fun&#xE7;&#xE3;o <code>Cliente.prototype.apresentar()</code> a interpola&#xE7;&#xE3;o de seus atributos no resultado final ser&#xE1; simplesmente <code>undefined</code>.</p>
<pre><code class="language-javascript">const john = new Cliente(&apos;John Connor&apos;, 25);
const mary = new Cliente(&apos;Mary Jane&apos;, 20);

john.apresentar(); // &apos;Cliente: undefined | Idade: undefined&apos;
mary.apresentar(); // &apos;Cliente: undefined | Idade: undefined&apos;
</code></pre>
<p>Simplesmente o arrow function para fun&#xE7;&#xF5;es de um objeto prototype n&#xE3;o mant&#xE9;m estado ap&#xF3;s instanciado. O ideal nesse caso &#xE9; manter a declara&#xE7;&#xE3;o de <code>function</code> normal:</p>
<pre><code class="language-javascript">Cliente.prototype.apresentar = function() {
  return `Cliente: ${this.nome} | Idade: ${this.idade}`;
};
</code></pre>
<p>Fontes: <a href="http://wesbos.com/arrow-function-no-no/">When Not to use an Arrow Function</a></p>]]></description><link>https://udgwebdev.com/quando-nao-usar-arrow-functions</link><guid isPermaLink="true">https://udgwebdev.com/quando-nao-usar-arrow-functions</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Sat, 24 Dec   16 02:00:00 GMT</pubDate></item><item><title><![CDATA[Escrevendo JavaScript melhor - Parte 5]]></title><description><![CDATA[<h1>Escrevendo JavaScript melhor - Parte 5</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="22/12/2016" pubdate=""><b>22/12/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="Escrevendo JavaScript melhor" title="Escrevendo JavaScript melhor"></p>
<p>Sim! Esse post vai ter parte 5 sim! E a id&#xE9;ia &#xE9; que no futuro tenha mais posts desse assunto. Nesse post vou mostrar algumas dicas sensacionais que j&#xE1; &#xE9; poss&#xED;vel aplicar usando JavaScript puro.</p>
<h2>Convertendo n&#xFA;meros para moeda sem framework</h2><p>Agora com ES6 j&#xE1; &#xE9; poss&#xED;vel converter Number para String currency nativo, usando apenas a fun&#xE7;&#xE3;o toLocaleString(). Veja:</p>
<pre><code class="language-javascript">(10.9).toLocaleString(); // &quot;10,90&quot;
(1002.5).toLocaleString(&quot;pt-BR&quot;); // &quot;1.002,50&quot;
(5.55).toLocaleString(&quot;pt-BR&quot;, {
  // Ajustando casas decimais
  minimumFractionDigits: 2,  
  maximumFractionDigits: 2
});
</code></pre>
<p>O melhor disso, &#xE9; que dessa forma voc&#xEA; evita fazer as gambiarras cl&#xE1;ssicas em usar <code>Math.abs()</code> ou <code>Number.prototype.toFixed()</code> do JavaScript.</p>
<p>E outro detalhe legal, esta seguro contra o bug do ponto flutuante:</p>
<pre><code>// Resultado bugado
0.1+0.2 // 0.30000000000000004
// Resultado sem bugs
(0.1+0.2).toLocaleString(); // &quot;0.3&quot;
</code></pre><h2>Criando slug strings com Regex</h2><p>Se voc&#xEA; precisar criar uma vers&#xE3;o slug de uma string, exemplo, transformar a frase: &quot;Escrevendo JavaScript Melhor&quot; em &quot;escrevendo-javascript-melhor&quot;, voc&#xEA; pode facilmente cria a seguinte fun&#xE7;&#xE3;o:</p>
<pre><code class="language-javascript">function slugify(content) {
  return content.toLowerCase().replace(/\s/g, &apos;-&apos;);
}

slugify(&quot;Escrevendo JavaScript Melhor&quot;); // &quot;escrevendo-javascript-melhor&quot;
</code></pre>
<p>Ou caso queira injetar essa fun&#xE7;&#xE3;o junto as demais fun&#xE7;&#xF5;es nativas da String, fa&#xE7;a o seguinte:</p>
<pre><code class="language-javascript">String.prototype.slugify = function() {
  return this.toLowerCase().replace(/\s/g, &apos;-&apos;);
}

&quot;Escrevendo JavaScript Melhor&quot;.slugify(); // &quot;escrevendo-javascript-melhor&quot;
</code></pre>
<h2>Percorrendo atributos de modo seguro</h2><p>&#xC9; muito comum ocorrer um erro quando se tenta acessar um atributo de um objeto que n&#xE3;o existe, exemplo:</p>
<pre><code>let obj;
console.log(obj.text.value); // Uncaught TypeError: Cannot read property &apos;text&apos; of undefined
</code></pre><p>Nesse caso, vai ocorrer um erro grave, alertando que n&#xE3;o pode ler a propriedade <code>text</code> de uma refer&#xEA;ncia <code>undefined</code>.</p>
<p>E se ao inv&#xE9;s de gerar um erro, simplesmente fosse ignorado essa situa&#xE7;&#xE3;o, retornando <code>undefined</code> no lugar do erro? Para isso voc&#xEA; pode simplesmente criar uma fun&#xE7;&#xE3;o recursiva para resolver esse problema:</p>
<pre><code class="language-javascript">function get(obj, attributes) {
  const flatAttributes = attributes.replace(/\[([0-9]+)\]/g, &apos;.$1&apos;);
  const cleanAttr = flatAttributes.replace(/(^[\.]|[\.]$)/g, &apos;&apos;);
  let nextAttrs, attrs;
  try {
    attrs = cleanAttr ? cleanAttr.split(&apos;.&apos;) : [cleanAttr];
    nextAttrs = attrs.slice(1).join(&apos;.&apos;);
  } finally {
    if (nextAttrs) {
      return get(obj[attrs[0]], nextAttrs);
    }
    return obj[cleanAttr];
  }
}
</code></pre>
<p>Eae com essa fun&#xE7;&#xE3;o voc&#xEA; poder&#xE1; percorrer os atributos de forma segura, veja:</p>
<pre><code class="language-javascript">const obj = { a: 1, b: { c: [{ x: 1 }] } };
get(obj, &apos;a&apos;); // 1
get(obj, &apos;b.c&apos;); // [{ x: 1 }]
get(obj, &apos;b.c[0]&apos;); // { x: 1 }
get(obj, &apos;b.c[0].x&apos;); // 1
get(obj, &apos;x&apos;); // undefined
</code></pre>
<p>Caso n&#xE3;o tenha visto, recomendo que leia tamb&#xE9;m as dicas anteriores, dessa s&#xE9;rie:</p>
<ul>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-1" title="Escrevendo JavaScript melhor - Parte 1">Escrevendo JavaScript melhor - Parte 1</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-2" title="Escrevendo JavaScript melhor - Parte 2">Escrevendo JavaScript melhor - Parte 2</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-3" title="Escrevendo JavaScript melhor - Parte 3">Escrevendo JavaScript melhor - Parte 3</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-4" title="Escrevendo JavaScript melhor - Parte 4">Escrevendo JavaScript melhor - Parte 4</a></li>
</ul>
<p>Fontes:</p>
<ul>
<li><a href="https://remysharp.com/2016/12/13/format-numjsor-es6">format-num.js&#x2026;or ES6!</a></li>
</ul>]]></description><link>https://udgwebdev.com/escrevendo-javascript-melhor-parte-5</link><guid isPermaLink="true">https://udgwebdev.com/escrevendo-javascript-melhor-parte-5</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Thu, 22 Dec   16 02:00:00 GMT</pubDate></item><item><title><![CDATA[Como obter conta bancária estrangeira sem sair do Brasil]]></title><description><![CDATA[Sim, este post vai te explicar de um jeito simples sobre como criar uma conta bancária simples, para receber grana do exterior, sem precisar sair do Brasil e sem precisar ir numa casa de câmbio.]]></description><link>https://udgwebdev.com/como-obter-conta-bancaria-estrangeira-sem-sair-do-brasil</link><guid isPermaLink="true">https://udgwebdev.com/como-obter-conta-bancaria-estrangeira-sem-sair-do-brasil</guid><category><![CDATA[Profissão]]></category><category><![CDATA[Money]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Tue, 06 Dec   16 02:00:00 GMT</pubDate></item><item><title><![CDATA[O blog esta de cara nova!]]></title><description><![CDATA[<h1>O blog esta de cara nova!</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="05/12/2016" pubdate=""><b>05/12/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#comunicado" rel="me" title="Menu: Comunicado">Comunicado</a></p><p><img src="https://udgwebdev.com/images/udgwebdev-logo-128.png" alt="Blog de cara nova!" title="Blog de cara nova!"></p>
<p>Fala galera! Depois de duas semanas trabalhando nos tempos livres, finalmente lancei uma nova cara pro blog!<br>Dessa vez o blog conta com os seguintes improvements:  </p>
<ul>
<li><p><strong>Migra&#xE7;&#xE3;o do static generator Jekyll para Harp.js</strong>: Gostei muito da simplicidade do <a href="http://harpjs.com/">Harp.js</a>, ele possui uma documenta&#xE7;&#xE3;o bem clara, boas conven&#xE7;&#xF5;es para organizar dados e metadados das p&#xE1;ginas, e o que mais acho dahora nele, &#xE9; que ele j&#xE1; internamente com compila&#xE7;&#xE3;o para Markdown, EJS ou Jade para HTML, Stylus, Sass ou Less para CSS e tamb&#xE9;m CoffeeScript para JS, no caso deste blog, estou usando Jade para p&#xE1;ginas din&#xE2;micas, Markdown para conte&#xFA;do dos posts e Sass para organizar todo CSS. Ele possui uma engine totalmente diferente do Jekyll, e por isso tive um certo trabalho criando scripts para migrar todos os posts. Caso voc&#xEA; queira migrar de Jekyll para uma engine mais pr&#xF3;xima dele existente no Node.js, recomendo que utilize o <a href="https://hexo.io/">Hexo</a>.</p>
</li>
<li><p><strong>Build/Deploy usando Grunt</strong>: Sim, eu uso <a href="http://gruntjs.com/">Grunt</a>! Muitos hoje em dia est&#xE3;o usando <a href="http://gulpjs.com/">Gulp</a>, <a href="https://webpack.github.io/">Webpack</a> ou outras novidades, mas o fato &#xE9; que j&#xE1; trabalhei com todos esses, e gosto do <a href="http://gruntjs.com/">Grunt</a>, foi uma escolha mais pessoal do que baseada em benchmark ou popularidade.</p>
</li>
<li><p><strong>Micro interactions</strong>: Para dar um up no blog, alguns <strong>micro interactions animados</strong> foram inclu&#xED;dos no blog, um no bot&#xE3;o inferior direito que mostra os links sociais, no sidebar existe uma galeria dos meus livros e tamb&#xE9;m foi inclu&#xED;do um &#xED;cone animado para status de loading nas tela de erro 404 ou tela de redirect.</p>
</li>
<li><p><strong>PWA e Layout Responsivo</strong>: Sim, dessa vez o blog esta 100% com layout responsivo e foi inclu&#xED;do algumas caracter&#xED;sticas de Progressive Web Apps, em geral, melhoramos a legibilidade das fontes usando a fonte do Ubuntu, principalmente na apresenta&#xE7;&#xE3;o de c&#xF3;digos e tamb&#xE9;m foi inclu&#xED;do um <code>manifest.json</code> para gerar uma vers&#xE3;o webapp do blog e <code>sw.js</code> (Service Worker) para permitir acessar o blog em modo offline.</p>
</li>
<li><p><strong>Infra</strong>: O blog continua hospedado no <a href="https://pages.github.com/">Github Pages</a> junto com o <a href="https://www.cloudflare.com/">CDN CloudFlare</a> vers&#xE3;o free, dessa forma consigo utilizar SSL free, protocolo HTTP2/SPDY, caching de arquivos est&#xE1;ticos que evitam com maior frequ&#xEA;ncia consumir recursos do <a href="https://help.github.com/articles/what-is-github-pages/">Github Pages que &#xE9; limitado</a>, o legal disso tudo &#xE9; que tenho uma infra robusta e totalmente de gra&#xE7;a!</p>
</li>
<li><p><strong>Yarn</strong>: Como essa nova vers&#xE3;o do blog esta 100% Node.js, resolvi testar o <a href="https://yarnpkg.com/">yarn</a> no lugar do <a href="http://npmjs.com/">npm</a>, e achei sensacional, ele baixa os m&#xF3;dulos mais r&#xE1;pido do que no npm, e o que achei mais interessante o cache dos m&#xF3;dulos que ele faz, que permite de instalar esses m&#xF3;dulos em modo offline, realmente vale a pena usar ele.</p>
</li>
</ul>
<p>Curtiu as mudan&#xE7;as? Para ver o c&#xF3;digo-fonte acesse: <a href="https://github.com/udgwebdev/udgwebdev.github.io">https://github.com/udgwebdev/udgwebdev.github.io</a></p>]]></description><link>https://udgwebdev.com/o-blog-esta-de-cara-nova</link><guid isPermaLink="true">https://udgwebdev.com/o-blog-esta-de-cara-nova</guid><category><![CDATA[Comunicado]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Mon, 05 Dec   16 02:00:00 GMT</pubDate></item><item><title><![CDATA[Acelerando comando dd no MacOS]]></title><description><![CDATA[Se você possui um mac e já tentou clonar uma distro linux para um cartão sd via comando dd e percebeu que demorava muito para fazer isso, veja nesse post uma simples solução que vai deixar 20x mais rápida a execução desse comando.]]></description><link>https://udgwebdev.com/acelerando-comando-dd-no-macos</link><guid isPermaLink="true">https://udgwebdev.com/acelerando-comando-dd-no-macos</guid><category><![CDATA[Dicas de terminal]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Tue, 15 Nov   16 02:00:00 GMT</pubDate></item><item><title><![CDATA[Dualboot no raspberry com berryboot]]></title><description><![CDATA[Neste post, explicarei como configurar um sistema gerenciador de boot muito foda, chamado BerryBoot, que vai permitir instalar múltiplos sistemas de forma muito fácil.]]></description><link>https://udgwebdev.com/dualboot-no-raspberry-com-berryboot</link><guid isPermaLink="true">https://udgwebdev.com/dualboot-no-raspberry-com-berryboot</guid><category><![CDATA[IoT]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Tue, 11 Oct   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Criando um media center com Raspberry Pi]]></title><description><![CDATA[Veja nesse post como montar um media center completo capaz de ver canais abertos do mundo inteiro, além de fazer torrent streaming usando OSMC e um Raspberry Pi.]]></description><link>https://udgwebdev.com/criando-um-media-center-com-raspberry-pi</link><guid isPermaLink="true">https://udgwebdev.com/criando-um-media-center-com-raspberry-pi</guid><category><![CDATA[IoT]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Thu, 06 Oct   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Dicas para conquistar um bom trampo em TI]]></title><description><![CDATA[Algumas dicas são simples de se começar a fazer agora mesmo, e espero que elas te ajudem, principalmente para você que esta começando na área de TI.]]></description><link>https://udgwebdev.com/dicas-para-conquistar-um-bom-trampo-de-ti</link><guid isPermaLink="true">https://udgwebdev.com/dicas-para-conquistar-um-bom-trampo-de-ti</guid><category><![CDATA[Profissão]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Sun, 02 Oct   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Deletando arquivos repetitivos pelo terminal]]></title><description><![CDATA[<h1>Deletando arquivos repetitivos pelo terminal</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="22/09/2016" pubdate=""><b>22/09/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#dicas-de-terminal" rel="me" title="Menu: Dicas de terminal">Dicas de terminal</a></p><p><img src="https://udgwebdev.com/images/terminal-console-linux.jpg" alt="Terminal Console Linux"></p>
<p>Depois de um bom tempo sem <a href="https://udgwebdev.com/dicas-de-terminal" title="Dicas de terminal">dicas de terminal</a>, eis que volta das cinzas essa categoria com um novo post, pelo qual a dica ser&#xE1; bastante &#xFA;til no seu dia-a-dia, basicamente &#xE9; um script que procura pastas e subpastas repeti&#xE7;&#xF5;es de um determinado arquivo e em seguida apaga-os, isso ocorre atrav&#xE9;s da combina&#xE7;&#xE3;o do comando <code>find</code> + <code>rm</code>.</p>
<p>O comando &#xE9; basicamente esse:</p>
<pre><code class="language-bash"> find nome_da_pasta -name &apos;nome_do_arquivo&apos; -exec rm {} \;
</code></pre>
<p>Para entender melhor os par&#xE2;metros desse comando:</p>
<ul>
<li><code>find nome_da_pasta</code>: vai iniciar uma busca a partir do nome da pasta indicada;</li>
<li><code>-name</code>: nome do arquivo a ser procurado;</li>
<li><code>-exec</code>: executa um comando bash qualquer, neste caso ser&#xE1; o comando <code>rm {} \</code>, pelo qual vai excluir cada arquivo encontrado pelo comando <code>find</code>;</li>
</ul>
<p>No meu caso, estou usando esse comando para apagar o maldito arquivo chato <code>.DS_Store</code> que &#xE9; gerado direto nos meus projetos pelo MacOSX, ent&#xE3;o resolvi criar o seguinte comando alias:</p>
<pre><code class="language-bash"> alias ds_clear=&quot;find . -name &apos;.DS_Store&apos; -exec rm {} \;&quot;
</code></pre>
<p>Dessa forma esse comando vai procurar e apagar todos os <code>.DS_Store</code> existentes nas subpastas, com base na pasta atual (Pois usei o <code>find .</code> para referenciar a pasta atual) que eu rodar esse comando.</p>
<p>Veja tamb&#xE9;m outras <a href="https://udgwebdev.com/dicas-de-terminal" title="Dicas de terminal">dicas de terminal</a>.</p>]]></description><link>https://udgwebdev.com/deletando-arquivos-repetitivos-no-terminal</link><guid isPermaLink="true">https://udgwebdev.com/deletando-arquivos-repetitivos-no-terminal</guid><category><![CDATA[Dicas de terminal]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Thu, 22 Sep   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Protegendo aplicações JavaScript]]></title><description><![CDATA[<h1>Protegendo aplica&#xE7;&#xF5;es JavaScript</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="08/09/2016" pubdate=""><b>08/09/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a></p><p><img src="https://udgwebdev.com/images/jscrambler-logo.png" alt="Protegendo aplica&#xE7;&#xF5;es JavaScript" title="Protegendo aplica&#xE7;&#xF5;es JavaScript"></p>
<p>Atualmente no JavaScript surgiram v&#xE1;rios frameworks (<strong>React, Angular, Ember, Backbone, Vue e etc</strong>) e a linguagem tamb&#xE9;m evoluiu muito com as implementa&#xE7;&#xF5;es ES6, ES7 e futuro ES8, isso tudo j&#xE1; nos permite criar aplica&#xE7;&#xF5;es web, mobile ou desktop bem complexas utilizando apenas JavaScript, por&#xE9;m, voc&#xEA; j&#xE1; parou para questionar sobre como proteger toda integridade de c&#xF3;digos JavaScript?</p>
<p>Quando se fala de proteger c&#xF3;digo JavaScript, existem dois caminhos:</p>
<ol>
<li>Proteger seu c&#xF3;digo contra invas&#xE3;o de hackers;</li>
<li>Proteger seu c&#xF3;digo propriet&#xE1;rio de ser copiado ilegalmente;</li>
</ol>
<p>JavaScript &#xE9; uma linguagem poderosa, por&#xE9;m no quesito seguran&#xE7;a ela tem o problema de ser uma linguagem interpretada. Afinal linguagens compiladas geram c&#xF3;digo bin&#xE1;rio antes de serem executadas, o que fornece uma camada extra contra leitura indevida do c&#xF3;digo-fonte, por&#xE9;m como o JavaScript &#xE9; executado em runtime, sem gerar bin&#xE1;rios, ou seja, todo c&#xF3;digo fica exposto, dando f&#xE1;cil visualiza&#xE7;&#xE3;o e compreens&#xE3;o tanto para m&#xE1;quinas quanto para humanos. Por exemplo, &#xE9; poss&#xED;vel visualizar nos browsers todo c&#xF3;digo-fonte client-side deste post, todo browser permite a visualiza&#xE7;&#xE3;o desses c&#xF3;digos.</p>
<p>E quando criamos aplica&#xE7;&#xF5;es mobile usando PhoneGap ou aplica&#xE7;&#xF5;es desktop usando Electron, tais aplica&#xE7;&#xF5;es que permitem a manipula&#xE7;&#xE3;o de <strong>informa&#xE7;&#xF5;es sens&#xED;veis do smartphone como camera, GPS, bluetooth, wifi</strong> e outras coisas, tudo isso, fica facilmente exposto no c&#xF3;digo-fonte JavaScript, e isso acaba se tornando um grande facilitador para hackers brincarem com sua aplica&#xE7;&#xE3;o. Um grande exemplo atual &#xE9; o jogo <strong>Pokemon GO</strong> pelo qual a comunidade hacker facilmente descobriu como manipular o jogo e criou bibliotecas para diversas linguagens, com intuito de facilitar a <strong>cria&#xE7;&#xE3;o de bots para o jogo</strong>.</p>
<p>Isso tudo n&#xE3;o teria acontecido se este jogo aplicasse uma prote&#xE7;&#xE3;o de integridade do c&#xF3;digo. Existem v&#xE1;rias ferramentas e/ou servi&#xE7;os na &#xE1;rea de ciber-seguran&#xE7;a que permitem n&#xE3;o s&#xF3; minificar, mas tamb&#xE9;m esconder partes sens&#xED;veis do c&#xF3;digo-fonte. Isso n&#xE3;o &#xE9; suficiente para garantir a prote&#xE7;&#xE3;o do mesmo, pois essas solu&#xE7;&#xF5;es s&#xE3;o permite aplicar engenharia reversa facilmente e sem grande esfor&#xE7;o. Para assegurar que sua aplica&#xE7;&#xE3;o n&#xE3;o seja adulterada, voc&#xEA; precisa adotar servi&#xE7;os que aplicam t&#xE9;cnicas de <strong>obfusca&#xE7;&#xE3;o resiliente com camadas adicionais de serguran&#xE7;a</strong>.
Um servi&#xE7;o que se destaca entre os demais nesta &#xE1;rea, &#xE9; o da <a href="https://jscrambler.com/en/?ref=https://udgwebdev.com" title="Jscrambler - Make your JavaScript Application Protect Itself">Jscrambler</a>, que &#xE9; uma solu&#xE7;&#xE3;o completa para prote&#xE7;&#xE3;o de c&#xF3;digo <strong>JavaScript multi-plataforma</strong>, ou seja, ele aplica prote&#xE7;&#xE3;o de integridade para aplica&#xE7;&#xF5;es mobile, desktop, web e server-side, sem degradar performance e sem prejudicar a funcionalidade de sua aplica&#xE7;&#xE3;o.</p>
<p>Esse servi&#xE7;o possui as seguintes caracter&#xED;sticas de prote&#xE7;&#xE3;o:</p>
<ul>
<li>JavaScript obfuscation;</li>
<li>Minification de c&#xF3;digo;</li>
<li>Inser&#xE7;&#xE3;o de dead code;</li>
<li>Function outlining;</li>
<li>Locking de browser e ou domain;</li>
<li>Data de expira&#xE7;&#xE3;o de c&#xF3;digo;</li>
<li>Servi&#xE7;o de anti-adult&#xE9;rio de c&#xF3;digo;</li>
<li>Oculta&#xE7;&#xE3;o de dados sens&#xED;veis no c&#xF3;digo;</li>
</ul>
<p>Caso tenha interesse, voc&#xEA; pode <a href="https://jscrambler.com/en/?ref=https://udgwebdev.com" title="Jscrambler - Make your JavaScript Application Protect Itself">testar a vers&#xE3;o trial</a> que em poucos minutos voc&#xEA; j&#xE1; configura sua aplica&#xE7;&#xE3;o na plataforma para aplicar prote&#xE7;&#xE3;o no c&#xF3;digo-fonte de seus projetos.</p>
<p>A Jscrambler j&#xE1; conta com mais de 25 mil usu&#xE1;rios, developers e empresas de todo o mundo, que usam o servi&#xE7;o para proteger os seus recursos propriet&#xE1;rios, desde startups a organiza&#xE7;&#xF5;es como a Fortune 500.
Esse servi&#xE7;o &#xE9; de grande utilidade para aplica&#xE7;&#xF5;es cuja a seguran&#xE7;a &#xE9; um fator fundamental, ou seja, aplica&#xE7;&#xF5;es internet banking, games, streaming de video propriet&#xE1;rio e etc. Se este for o seu caso, <a href="https://jscrambler.com/en/?ref=https://udgwebdev.com" title="Jscrambler - Make your JavaScript Application Protect Itself">ent&#xE3;o vale a pena testar essa plataforma</a>.</p>]]></description><link>https://udgwebdev.com/protegendo-aplicacoes-javascript</link><guid isPermaLink="true">https://udgwebdev.com/protegendo-aplicacoes-javascript</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Thu, 08 Sep   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Escrevendo JavaScript melhor - Parte 4]]></title><description><![CDATA[<h1>Escrevendo JavaScript melhor - Parte 4</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="06/08/2016" pubdate=""><b>06/08/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="Escrevendo JavaScript melhor" title="Escrevendo JavaScript melhor"></p>
<p>E mais uma vez, volto a falar desse assunto, j&#xE1; chegando na quarto epis&#xF3;dio dessa s&#xE9;rie sobre boas pr&#xE1;ticas para escrever JavaScript melhor.</p>
<h2>1) Trocando valores entre duas vari&#xE1;veis</h2><p>Se voc&#xEA; j&#xE1; precisou trocar valores entre duas vari&#xE1;veis, &#xE9; bem prov&#xE1;vel que voc&#xEA; j&#xE1; tenha feito um c&#xF3;digo parecido com esse:</p>
<pre><code class="language-javascript"> let x = 10;
 let y = 20;
 let aux = x;
 x = y;
 y = aux;
 console.log(x); // 20;
 console.log(y); // 10;
</code></pre>
<p>Hoje, gra&#xE7;as ao ES6, temos o <code>Destructuring Assignment</code> que &#xE9; uma feature bem legal, que permite fazer essa troca de valores <strong>em apenas 1 linha de c&#xF3;digo!</strong> Veja:</p>
<pre><code class="language-javascript"> let x = 10;
 let y = 20;
 [x, y] = [y, x];
 console.log(x); // 20;
 console.log(y); // 10;
</code></pre>
<p>Ele usa uma s&#xED;ntaxe parecida com array para definir os novos valores. E &#xE9; poss&#xED;vel fazer muito mais com esse recurso, recomendo fortemente a leitura desse artigo para se aprofundar mais nele: <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Mozilla Developers - Destructuring Assignment</a></p>
<h2>2) Movendo o primeiro item para &#xFA;ltima posi&#xE7;&#xE3;o do array</h2><p>Se voc&#xEA; precisar mover o primeiro item de um array para a &#xFA;ltima posi&#xE7;&#xE3;o, siga essa simples dica, use o retorno da fun&#xE7;&#xE3;o <code>array.shift()</code> como entrada para fun&#xE7;&#xE3;o <code>array.push()</code>, veja:</p>
<pre><code class="language-javascript"> const array = [1, 2, 3, 4, 5];
 array.push(array.shift());
 console.log(array); // [2, 3, 4, 5, 1];
</code></pre>
<h2>3) Movendo o &#xFA;ltimo item para primeira posi&#xE7;&#xE3;o do array</h2><p>Caso precise fazer o movimento inverso, basta usar o retorno de <code>array.pop()</code> como entrada para a fun&#xE7;&#xE3;o <code>array.unshift()</code>:</p>
<pre><code class="language-javascript"> const array = [1, 2, 3, 4, 5];
 array.unshift(array.pop());
 console.log(array); // [5, 1, 2, 3, 4]
</code></pre>
<h2>4) Limpando valores nulos de um array</h2><p>A fun&#xE7;&#xE3;o <code>array.filter()</code>, retorna um novo array com base no callback de filtro que voc&#xEA; estabelecer como regra, nesse caso voc&#xEA; pode incluir qualquer regra como retorno de seu callback, para que seja aplicado o filtro, por&#xE9;m existe um shortcut de filtro para limpar valores do tipo: <code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code> ou <code>0</code>, neste caso basta incluir a keyword <code>Boolean</code>, veja:</p>
<pre><code class="language-javascript"> const array = [undefined, &apos;apple&apos;, &apos;orange&apos;, &apos;&apos;, &apos;kiwi&apos;, &apos;pumpkin&apos;, &apos;grape&apos;, &apos;&apos;, 0, null];
 const novoArray = array.filter(Boolean);
 console.log(novoArray); // [&apos;apple&apos;, &apos;orange&apos;, &apos;kiwi&apos;, &apos;pumpkin&apos;, &apos;grape&apos;];
</code></pre>
<p>Veja tamb&#xE9;m:</p>
<ul>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-1" title="Escrevendo JavaScript melhor - Parte 1">Escrevendo JavaScript melhor - Parte 1</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-2" title="Escrevendo JavaScript melhor - Parte 2">Escrevendo JavaScript melhor - Parte 2</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-3" title="Escrevendo JavaScript melhor - Parte 3">Escrevendo JavaScript melhor - Parte 3</a></li>
</ul>
<p>Estou adorando escrever sobre esse assunto, caso voc&#xEA; tenha uma dica boa sobre como escrever JavaScript melhor comente abaixo que farei quest&#xE3;o de estudar e escrever no pr&#xF3;ximo post, e &#xE9; claro, citando o nome do autor da dica, at&#xE9; o pr&#xF3;ximo post!</p>]]></description><link>https://udgwebdev.com/escrevendo-javascript-melhor-parte-4</link><guid isPermaLink="true">https://udgwebdev.com/escrevendo-javascript-melhor-parte-4</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Sat, 06 Aug   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Customizando npm init]]></title><description><![CDATA[<h1>Customizando npm init</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="03/08/2016" pubdate=""><b>03/08/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/npm-logo.png" alt="Customizando npm init" title="Customizando npm init"></p>
<p>Para quem n&#xE3;o conhece esse comando, o <code>npm init</code> apresenta um simples question&#xE1;rio para descrever informa&#xE7;&#xF5;es b&#xE1;sica de um m&#xF3;dulo Node.js, pelo qual seu resultado final &#xE9; gerar o arquivo <code>package.json</code>.</p>
<p>Por&#xE9;m, &#xE9; poss&#xED;vel customizar o resultado desse comando, incrementando novas informa&#xE7;&#xF5;es para agilizar na gera&#xE7;&#xE3;o do <code>package.json</code> a cada novo projeto. Para fazer essa simples customiza&#xE7;&#xE3;o, basta criar na pasta ra&#xED;z de usu&#xE1;rio do sistema o arquivo: <code>~/.npm-init.js</code>, nele voc&#xEA; pode injetar valores pr&#xE9;-definidos para alguns campos chaves na gera&#xE7;&#xE3;o de um <code>package.json</code>, veja esse exemplo:</p>
<pre><code class="language-javascript"> exports.name = prompt(&apos;Name&apos;, basename);
 exports.description = prompt(&apos;Description&apos;, &apos;&apos;);
 exports.version = prompt(&apos;Version&apos;, config.get(&apos;init-version&apos;));
 exports.main = config.get(&apos;main-file&apos;);
 exports.license = config.get(&apos;init-license&apos;);
 exports.author = config.get(&apos;init-author-name&apos;) + &apos;&lt;&apos;+config.get(&apos;init-author-email&apos;)+&apos;&gt;&apos;;
 exports.scripts = {
   start: &apos;node &apos; + config.get(&apos;main-file&apos;),
   prestart: &apos;npm install&apos;
 };
 exports.engines = {
   node: &apos;&gt;= 4.4.7&apos;,
   npm: &apos;&gt;= 2.15.8&apos;
 };
</code></pre>
<p>Cada <code>exports.chave</code> &#xE9; referente a um atributo a ser inclu&#xED;do no <code>package.json</code>.
Outro detalhe mais legal, &#xE9; que &#xE9; poss&#xED;vel deixar algumas das principais perguntas j&#xE1; respondidas com valores default, para isso basta editar o arquivo <code>~/.npmrc</code>, incluindo nele algums campos, como por exemplo:</p>
<pre><code class="language-bash"> init-license=&apos;MIT&apos;
 init-author-name=&apos;Caio Ribeiro Pereira&apos;
 init-author-email=&apos;caio.ribeiro.pereira@gmail.com&apos;
 init-version=&apos;0.0.1&apos;
 main-file=&apos;index.js&apos;
</code></pre>
<p>Com isso, praticamente voc&#xEA; nem ter&#xE1; mais que responder as principais perguntas, pois elas j&#xE1; ser&#xE3;o pr&#xE9;-definidas pelos valores existentes no <code>~/.npmrc</code>, tanto &#xE9; que elas s&#xE3;o acessadas magicamente pela fun&#xE7;&#xE3;o <code>config.get(&apos;nome-de-uma-key&apos;)</code>.</p>
<p>Agora se voc&#xEA; criar um novo projeto e rodar o comando <code>npm init</code> voc&#xEA; ter&#xE1; um resultado semelhante a este:</p>
<p><a href="https://udgwebdev.com/images/npm-init.png"><img src="https://udgwebdev.com/images/npm-init-small.png" alt="Clique na imagem para ampliar" title="Clique na imagem para ampliar"></a></p>
<p>See you in the next post!</p>]]></description><link>https://udgwebdev.com/customizando-npm-init</link><guid isPermaLink="true">https://udgwebdev.com/customizando-npm-init</guid><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Wed, 03 Aug   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Escrevendo JavaScript melhor - Parte 3]]></title><description><![CDATA[<h1>Escrevendo JavaScript melhor - Parte 3</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="29/07/2016" pubdate=""><b>29/07/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#javascript" rel="me" title="Menu: JavaScript">JavaScript</a></p><p><img src="https://udgwebdev.com/images/es6-logo.jpg" alt="Escrevendo JavaScript melhor" title="Escrevendo JavaScript melhor"></p>
<p>E mais uma vez, continuando essa s&#xE9;rie de posts sobre dicas para escrever c&#xF3;digo JavaScript melhor, nesse post vejam mais quatro dicas bem legais.</p>
<h2>1) Verificando se um item existe em um array</h2><p>Para verificar se um determinado item existe em um array, praticamente muita gente j&#xE1; deve ter feito algo parecido com isso:</p>
<pre><code class="language-javascript"> var itens = [1,2,3,4,6];
 var item = 4;
 var existe = false;
 for (var i = 0; i &lt; itens.length; i++) {
    if (itens[i] === item) {
        existe = true;
        break;
    }
 }
</code></pre>
<p>Com certeza voc&#xEA; j&#xE1; deve ter feito ou visto isso, seja em projetos grandes ou mini-projetos de li&#xE7;&#xE3;o de casa na faculdade!</p>
<p>&#xC9; muito comum uma implementa&#xE7;&#xE3;o desse tipo para verificar se um determinado item existe em um array, por&#xE9;m caso n&#xE3;o conhe&#xE7;a, no ES6 existe uma fun&#xE7;&#xE3;o muito enxuta para fazer esse tipo de checagem, se chama <code>includes()</code>, veja como us&#xE1;-la:</p>
<pre><code class="language-javascript"> var itens = [1,2,3,4,6];
 var item = 6;
 itens.includes(6); // Retorna true
</code></pre>
<h2>2) Simplificando compara&#xE7;&#xF5;es nulas</h2><p>O JavaScript &#xE9; uma linguagem em que quando queremos verificar se tal vari&#xE1;vel n&#xE3;o possui um valor, elas geralmente podem ter valores do tipo: <code>null</code>, <code>undefined</code>, <code>&quot;&quot;</code> ou <code>false</code>.</p>
<p>Nesses casos &#xE9; muito comum projetos verificarem esses valores da seguinte maneira:</p>
<pre><code class="language-javascript"> if (foo !== null &amp;&amp; foo !== undefined &amp;&amp; foo !== &quot;&quot;) {
    fazerAlgo();
 }
</code></pre>
<p>Por favor, parem de escrever desse jeito! O c&#xF3;digo fica muiiiiitoooo feio!!!
Caso n&#xE3;o saiba, existe um simples shortcut l&#xF3;gico para verificar esses a exist&#xEA;ncia desses valores no JavaScript, basta utilizar o operador l&#xF3;gico de nega&#xE7;&#xE3;o ou dupla nega&#xE7;&#xE3;o:</p>
<pre><code class="language-javascript"> if (!!foo) {
    fazerAlgo();
 }
</code></pre>
<p>Neste caso, se <code>foo</code> possuir um valor diferente de: <code>null</code>, <code>undefined</code>, <code>false</code>, <code>0</code> ou <code>&quot;&quot;</code> ent&#xE3;o ele possui um valor v&#xE1;lido, suficiente para retornar true nessa condicional.
Veja mais detalhes sobre essa dica nesse post: <a href="https://udgwebdev.com/15-javascript-hacks" title="15 JavaScript Hacks">15 JavaScript Hacks</a></p>
<h2>3) Aplicando substring corretamente</h2><p>Em primeiro lugar, acredito que muita gente aplica substring corretamente, por&#xE9;m voc&#xEA; sabe as diferen&#xE7;as entre as fun&#xE7;&#xF5;es: <code>substring()</code> e <code>substr()</code>?</p>
<p>Basicamente ambas fun&#xE7;&#xF5;es utilizam a mesma entrada de argumentos, o primeiro argumento &#xE9; o ind&#xED;ce de ponto de partida, por&#xE9;m a diferen&#xE7;a esta na sem&#xE2;ntica do segundo argumento de ambas fun&#xE7;&#xF5;es, veja.</p>
<pre><code class="language-javascript"> &quot;JavaScript&quot;.substr(4, 6); // &quot;Script&quot;
 &quot;JavaScript&quot;.substring(4, 6); // &quot;Sc&quot;
</code></pre>
<p>Em <code>substr(index, qtd)</code> o segundo par&#xE2;metro retorna a quantidade de caracteres a partir do index</p>
<p>Em <code>substring(start, end)</code> o segundo par&#xE2;metro retorna a posi&#xE7;&#xE3;o final da string, ou seja, essa fun&#xE7;&#xE3;o retorna a substring com base na posi&#xE7;&#xE3;o inicial at&#xE9; final</p>
<p>.</p>
<p>Veja tamb&#xE9;m:</p>
<ul>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-1" title="Escrevendo JavaScript melhor - Parte 1">Escrevendo JavaScript melhor - Parte 1</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-2" title="Escrevendo JavaScript melhor - Parte 2">Escrevendo JavaScript melhor - Parte 2</a></li>
<li><a href="https://udgwebdev.com/escrevendo-javascript-melhor-parte-4" title="Escrevendo JavaScript melhor - Parte 4">Escrevendo JavaScript melhor - Parte 4</a></li>
</ul>
<p>At&#xE9; a pr&#xF3;xima galera!</p>]]></description><link>https://udgwebdev.com/escrevendo-javascript-melhor-parte-3</link><guid isPermaLink="true">https://udgwebdev.com/escrevendo-javascript-melhor-parte-3</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Fri, 29 Jul   16 03:00:00 GMT</pubDate></item><item><title><![CDATA[Video Streaming com Node.js]]></title><description><![CDATA[<h1>Video Streaming com Node.js</h1><p class="text-muted">Publica&#xE7;&#xE3;o: <time datetime="24/07/2016" pubdate=""><b>24/07/2016</b></time> | Tags: <a href="https://udgwebdev.com/menu/#node.js" rel="me" title="Menu: Node.js">Node.js</a></p><p><img src="https://udgwebdev.com/images/nodejs-logo.jpg" alt="Video Streaming com Node.js" title="Video Streaming com Node.js"></p>
<p>Streaming de videos &#xE9; algo muito comum nos dias de hoje, afinal quem &#xE9; que n&#xE3;o conhece Netflix, Vimeo ou pelo menos Youtube? (E o Redtube e XVideos? hahahaha) Em geral o que todos esses sites tem em comum &#xE9; que possuem servidores que realizam streaming de video.</p>
<p>Mas o que &#xE9; Streaming? N&#xE3;o sou expert nesse assunto, mas basicamente o Streaming &#xE9; uma funcionalidade de processar dados (geralmente grandes) em peda&#xE7;os, para que eles sejam enviados ou escritos aos poucos. Um bom exemplo disso s&#xE3;o os videos e audios, eles geralmente s&#xE3;o arquivos grandes, algo que realizando um download normal, vai te fazer esperar alguns minutos ou horas (dependendo do tamanho do arquivo e principalmente da velocidade de sua banda larga). Nesse caso o uso do streaming, vai te permitir consumir esses arquivos aos poucos, sem esperar muito tempo comparado com o download normal, afinal ser&#xE1; feito downloads de peda&#xE7;os menores desse arquivo que ser&#xE1; suficiente para voc&#xEA; ir consumindo-o aos poucos tamb&#xE9;m.</p>
<p>Por exemplo: Quem nunca viu o youtube carregando partes de um video, suficiente para que voc&#xEA; j&#xE1; assista os primeiros segundos desse video, enquanto ele vai baixando mais peda&#xE7;os desse video, at&#xE9; montar completamente o video? Quem nunca viu um video travar pois ele carregou poucos dados pelo qual voc&#xEA; j&#xE1; assistiu e teve que esperar o carregamento de mais dados durante uma tela congelada?</p>
<p>Tudo isso foi realizado via servidor de streaming de dados aliado com o recurso de <a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding">Chunked Transfer Encoding</a> do protocolo HTTP 1.1.</p>
<p>O Node.js possui nativamente o m&#xF3;dulo <a href="https://nodejs.org/api/stream.html">Stream</a> que permite trabalhar com streaming de arquivos, tamb&#xE9;m existe um ebook free criado pelo @substack, que realmente explica bem detalhado como trabalhar com streaming no Node.js, recomendo muito essa leitura: <a href="https://github.com/substack/stream-handbook">stream-handbook</a>.</p>
<p>Depois dessa introdu&#xE7;&#xE3;o, vou mostrar em c&#xF3;digo um simples servidor de video streaming que voc&#xEA; pode criar e usar em sua casa, para por exemplo renderizar seus videos em sua rede wifi.</p>
<p>Para come&#xE7;ar, rode esses comandos para criar o projeto inicial:</p>
<pre><code class="language-bash"> mkdir videoflix
 cd videoflix
 npm init
</code></pre>
<p>Ap&#xF3;s preencher os campos para criar o <code>package.json</code>, instale o <a href="https://expressjs.com/">Express</a> para que possamos criar algumas rotas din&#xE2;micas em nossa aplica&#xE7;&#xE3;o:</p>
<pre><code class="language-bash"> npm install --save express
</code></pre>
<p>Agora crie o <code>index.js</code> que ser&#xE1; o c&#xF3;digo backend do nosso servidor de streaming</p>
<pre><code class="language-javascript"> const fs = require(&apos;fs&apos;);
 const express = require(&apos;express&apos;);
 const app = express();
 app.get(&apos;/&apos;, (req, res) =&gt; {
   fs.readFile(&apos;./index.html&apos;, (err, html) =&gt; res.end(html));
 });
 app.get(&apos;/movies/:movieName&apos;, (req, res) =&gt; {
   const { movieName } = req.params;
   const movieFile = `./movies/${movieName}`;
   fs.stat(movieFile, (err, stats) =&gt; {
     if (err) {
       console.log(err);
       return res.status(404).end(&apos;&lt;h1&gt;Movie Not found&lt;/h1&gt;&apos;);
     }
     // Vari&#xE1;veis necess&#xE1;rias para montar o chunk header corretamente
     const { range } = req.headers;
     const { size } = stats;
     const start = Number((range || &apos;&apos;).replace(/bytes=/, &apos;&apos;).split(&apos;-&apos;)[0]);
     const end = size - 1;
     const chunkSize = (end - start) + 1;
     // Definindo headers de chunk
     res.set({
       &apos;Content-Range&apos;: `bytes ${start}-${end}/${size}`,
       &apos;Accept-Ranges&apos;: &apos;bytes&apos;,
       &apos;Content-Length&apos;: chunkSize,
       &apos;Content-Type&apos;: &apos;video/mp4&apos;
     });
     // &#xC9; importante usar status 206 - Partial Content para o streaming funcionar
     res.status(206);
     // Utilizando ReadStream do Node.js
     // Ele vai ler um arquivo e envi&#xE1;-lo em partes via stream.pipe()
     const stream = fs.createReadStream(movieFile, { start, end });
     stream.on(&apos;open&apos;, () =&gt; stream.pipe(res));
     stream.on(&apos;error&apos;, (streamErr) =&gt; res.end(streamErr));
   });
 });
 app.listen(3000, () =&gt; console.log(&apos;VideoFlix Server!&apos;));
</code></pre>
<p>Para garantir que o servidor funcione, crie a pasta <code>movies</code> na ra&#xED;z do projeto, e inclua alguns videos em formato MP4. Para evitar problemas com nomes de arquivos, recomendo que renomeie os videos de mp4 de forma que n&#xE3;o contenha espa&#xE7;os em branco.</p>
<p>Em seguida, crie o <code>index.html</code> que ter&#xE1; a parte visual para renderizar o player de video gerado nativamente pelo HTML5:</p>
<pre><code class="language-html"> &lt;!DOCTYPE html&gt;
 &lt;html&gt;
   &lt;head&gt;
     &lt;meta charset=&quot;utf-8&quot;&gt;
     &lt;title&gt;VideoFlix&lt;/title&gt;
     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;
   &lt;/head&gt;
   &lt;body style=&quot;text-align:center&quot;&gt;
     &lt;div style=&quot;margin:0 auto;&quot;&gt;
       &lt;!-- Mude o src dessa tag para o nome do video que voc&#xEA; possuir --&gt;
       &lt;video src=&quot;/movies/300.mp4&quot; controls width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/video&gt;
     &lt;/div&gt;
   &lt;/body&gt;
 &lt;/html&gt;
</code></pre>
<p>Para testar esse server, rode o comando <code>node index.js</code>, acesse <a href="http://localhost:3000">localhost:3000</a>, se tudo estiver ok, um player do HTML5 ser&#xE1; renderizado no seu browser, permitindo que voc&#xEA; visualize o filme que voc&#xEA; incluir no seu servidor. At&#xE9; a pr&#xF3;xima!</p>]]></description><link>https://udgwebdev.com/video-streaming-com-nodejs</link><guid isPermaLink="true">https://udgwebdev.com/video-streaming-com-nodejs</guid><category><![CDATA[Node.js]]></category><dc:creator><![CDATA[Caio Ribeiro Pereira]]></dc:creator><pubDate>Sun, 24 Jul   16 03:00:00 GMT</pubDate></item></channel></rss>